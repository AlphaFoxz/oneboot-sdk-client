// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

#[derive(Copy, Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkFileTypeEnum(pub i32);

impl SdkFileTypeEnum {
  pub const LOCAL_FILE: SdkFileTypeEnum = SdkFileTypeEnum(0);
  pub const LOCAL_DIR: SdkFileTypeEnum = SdkFileTypeEnum(1);
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::LOCAL_FILE,
    Self::LOCAL_DIR,
  ];
}

impl TSerializable for SdkFileTypeEnum {
  #[allow(clippy::trivially_copy_pass_by_ref)]
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    o_prot.write_i32(self.0)
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkFileTypeEnum> {
    let enum_value = i_prot.read_i32()?;
    Ok(SdkFileTypeEnum::from(enum_value))
  }
}

impl From<i32> for SdkFileTypeEnum {
  fn from(i: i32) -> Self {
    match i {
      0 => SdkFileTypeEnum::LOCAL_FILE,
      1 => SdkFileTypeEnum::LOCAL_DIR,
      _ => SdkFileTypeEnum(i)
    }
  }
}

impl From<&i32> for SdkFileTypeEnum {
  fn from(i: &i32) -> Self {
    SdkFileTypeEnum::from(*i)
  }
}

impl From<SdkFileTypeEnum> for i32 {
  fn from(e: SdkFileTypeEnum) -> i32 {
    e.0
  }
}

impl From<&SdkFileTypeEnum> for i32 {
  fn from(e: &SdkFileTypeEnum) -> i32 {
    e.0
  }
}

