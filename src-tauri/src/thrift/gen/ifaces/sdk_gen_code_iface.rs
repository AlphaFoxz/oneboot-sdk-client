// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::thrift::gen::dtos::sdk_request_dto;
use crate::thrift::gen::dtos::sdk_response_dto;

//
// SdkGenCodeIface service client
//

pub trait TSdkGenCodeIfaceSyncClient {
  fn preview_generate_ts_api(&mut self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto, gen_dir: String) -> thrift::Result<sdk_response_dto::SdkMapResponseDto>;
  fn generate_java_api(&mut self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn generate_java_rpc(&mut self, task_id: i64) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn preview_generate_sql(&mut self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto) -> thrift::Result<sdk_response_dto::SdkMapResponseDto>;
}

pub trait TSdkGenCodeIfaceSyncClientMarker {}

pub struct SdkGenCodeIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> SdkGenCodeIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> SdkGenCodeIfaceSyncClient<IP, OP> {
    SdkGenCodeIfaceSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for SdkGenCodeIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TSdkGenCodeIfaceSyncClientMarker for SdkGenCodeIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TSdkGenCodeIfaceSyncClientMarker> TSdkGenCodeIfaceSyncClient for C {
  fn preview_generate_ts_api(&mut self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto, gen_dir: String) -> thrift::Result<sdk_response_dto::SdkMapResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("previewGenerateTsApi", TMessageType::Call, self.sequence_number());
        let call_args = SdkGenCodeIfacePreviewGenerateTsApiArgs { template_dto, gen_dir };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("previewGenerateTsApi", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkGenCodeIfacePreviewGenerateTsApiResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn generate_java_api(&mut self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("generateJavaApi", TMessageType::Call, self.sequence_number());
        let call_args = SdkGenCodeIfaceGenerateJavaApiArgs { template_dto };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("generateJavaApi", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkGenCodeIfaceGenerateJavaApiResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn generate_java_rpc(&mut self, task_id: i64) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("generateJavaRpc", TMessageType::Call, self.sequence_number());
        let call_args = SdkGenCodeIfaceGenerateJavaRpcArgs { task_id };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("generateJavaRpc", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkGenCodeIfaceGenerateJavaRpcResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn preview_generate_sql(&mut self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto) -> thrift::Result<sdk_response_dto::SdkMapResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("previewGenerateSql", TMessageType::Call, self.sequence_number());
        let call_args = SdkGenCodeIfacePreviewGenerateSqlArgs { template_dto };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("previewGenerateSql", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkGenCodeIfacePreviewGenerateSqlResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// SdkGenCodeIface service processor
//

pub trait SdkGenCodeIfaceSyncHandler {
  fn handle_preview_generate_ts_api(&self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto, gen_dir: String) -> thrift::Result<sdk_response_dto::SdkMapResponseDto>;
  fn handle_generate_java_api(&self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn handle_generate_java_rpc(&self, task_id: i64) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn handle_preview_generate_sql(&self, template_dto: sdk_request_dto::SdkCodeTemplateRequestDto) -> thrift::Result<sdk_response_dto::SdkMapResponseDto>;
}

pub struct SdkGenCodeIfaceSyncProcessor<H: SdkGenCodeIfaceSyncHandler> {
  handler: H,
}

impl <H: SdkGenCodeIfaceSyncHandler> SdkGenCodeIfaceSyncProcessor<H> {
  pub fn new(handler: H) -> SdkGenCodeIfaceSyncProcessor<H> {
    SdkGenCodeIfaceSyncProcessor {
      handler,
    }
  }
  fn process_preview_generate_ts_api(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkGenCodeIfaceProcessFunctions::process_preview_generate_ts_api(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_generate_java_api(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkGenCodeIfaceProcessFunctions::process_generate_java_api(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_generate_java_rpc(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkGenCodeIfaceProcessFunctions::process_generate_java_rpc(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_preview_generate_sql(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkGenCodeIfaceProcessFunctions::process_preview_generate_sql(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TSdkGenCodeIfaceProcessFunctions;

impl TSdkGenCodeIfaceProcessFunctions {
  pub fn process_preview_generate_ts_api<H: SdkGenCodeIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkGenCodeIfacePreviewGenerateTsApiArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_preview_generate_ts_api(args.template_dto, args.gen_dir) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("previewGenerateTsApi", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkGenCodeIfacePreviewGenerateTsApiResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("previewGenerateTsApi", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("previewGenerateTsApi", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_generate_java_api<H: SdkGenCodeIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkGenCodeIfaceGenerateJavaApiArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_generate_java_api(args.template_dto) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("generateJavaApi", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkGenCodeIfaceGenerateJavaApiResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("generateJavaApi", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("generateJavaApi", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_generate_java_rpc<H: SdkGenCodeIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkGenCodeIfaceGenerateJavaRpcArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_generate_java_rpc(args.task_id) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("generateJavaRpc", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkGenCodeIfaceGenerateJavaRpcResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("generateJavaRpc", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("generateJavaRpc", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_preview_generate_sql<H: SdkGenCodeIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkGenCodeIfacePreviewGenerateSqlArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_preview_generate_sql(args.template_dto) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("previewGenerateSql", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkGenCodeIfacePreviewGenerateSqlResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("previewGenerateSql", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("previewGenerateSql", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: SdkGenCodeIfaceSyncHandler> TProcessor for SdkGenCodeIfaceSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "previewGenerateTsApi" => {
        self.process_preview_generate_ts_api(message_ident.sequence_number, i_prot, o_prot)
      },
      "generateJavaApi" => {
        self.process_generate_java_api(message_ident.sequence_number, i_prot, o_prot)
      },
      "generateJavaRpc" => {
        self.process_generate_java_rpc(message_ident.sequence_number, i_prot, o_prot)
      },
      "previewGenerateSql" => {
        self.process_preview_generate_sql(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// SdkGenCodeIfacePreviewGenerateTsApiArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfacePreviewGenerateTsApiArgs {
  template_dto: sdk_request_dto::SdkCodeTemplateRequestDto,
  gen_dir: String,
}

impl SdkGenCodeIfacePreviewGenerateTsApiArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfacePreviewGenerateTsApiArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkCodeTemplateRequestDto> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkCodeTemplateRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkGenCodeIfacePreviewGenerateTsApiArgs.template_dto", &f_1)?;
    verify_required_field_exists("SdkGenCodeIfacePreviewGenerateTsApiArgs.gen_dir", &f_2)?;
    let ret = SdkGenCodeIfacePreviewGenerateTsApiArgs {
      template_dto: f_1.expect("auto-generated code should have checked for presence of required fields"),
      gen_dir: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("previewGenerateTsApi_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("templateDto", TType::Struct, 1))?;
    self.template_dto.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("genDir", TType::String, 2))?;
    o_prot.write_string(&self.gen_dir)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfacePreviewGenerateTsApiResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfacePreviewGenerateTsApiResult {
  result_value: Option<sdk_response_dto::SdkMapResponseDto>,
}

impl SdkGenCodeIfacePreviewGenerateTsApiResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkMapResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkGenCodeIfacePreviewGenerateTsApi"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfacePreviewGenerateTsApiResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkMapResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkMapResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkGenCodeIfacePreviewGenerateTsApiResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkGenCodeIfacePreviewGenerateTsApiResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfaceGenerateJavaApiArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfaceGenerateJavaApiArgs {
  template_dto: sdk_request_dto::SdkCodeTemplateRequestDto,
}

impl SdkGenCodeIfaceGenerateJavaApiArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfaceGenerateJavaApiArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkCodeTemplateRequestDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkCodeTemplateRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkGenCodeIfaceGenerateJavaApiArgs.template_dto", &f_1)?;
    let ret = SdkGenCodeIfaceGenerateJavaApiArgs {
      template_dto: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("generateJavaApi_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("templateDto", TType::Struct, 1))?;
    self.template_dto.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfaceGenerateJavaApiResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfaceGenerateJavaApiResult {
  result_value: Option<sdk_response_dto::SdkListResponseDto>,
}

impl SdkGenCodeIfaceGenerateJavaApiResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkGenCodeIfaceGenerateJavaApi"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfaceGenerateJavaApiResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkListResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkListResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkGenCodeIfaceGenerateJavaApiResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkGenCodeIfaceGenerateJavaApiResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfaceGenerateJavaRpcArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfaceGenerateJavaRpcArgs {
  task_id: i64,
}

impl SdkGenCodeIfaceGenerateJavaRpcArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfaceGenerateJavaRpcArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkGenCodeIfaceGenerateJavaRpcArgs.task_id", &f_1)?;
    let ret = SdkGenCodeIfaceGenerateJavaRpcArgs {
      task_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("generateJavaRpc_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 1))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfaceGenerateJavaRpcResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfaceGenerateJavaRpcResult {
  result_value: Option<sdk_response_dto::SdkListResponseDto>,
}

impl SdkGenCodeIfaceGenerateJavaRpcResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkGenCodeIfaceGenerateJavaRpc"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfaceGenerateJavaRpcResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkListResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkListResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkGenCodeIfaceGenerateJavaRpcResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkGenCodeIfaceGenerateJavaRpcResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfacePreviewGenerateSqlArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfacePreviewGenerateSqlArgs {
  template_dto: sdk_request_dto::SdkCodeTemplateRequestDto,
}

impl SdkGenCodeIfacePreviewGenerateSqlArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfacePreviewGenerateSqlArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkCodeTemplateRequestDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkCodeTemplateRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkGenCodeIfacePreviewGenerateSqlArgs.template_dto", &f_1)?;
    let ret = SdkGenCodeIfacePreviewGenerateSqlArgs {
      template_dto: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("previewGenerateSql_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("templateDto", TType::Struct, 1))?;
    self.template_dto.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkGenCodeIfacePreviewGenerateSqlResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkGenCodeIfacePreviewGenerateSqlResult {
  result_value: Option<sdk_response_dto::SdkMapResponseDto>,
}

impl SdkGenCodeIfacePreviewGenerateSqlResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkMapResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkGenCodeIfacePreviewGenerateSql"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkGenCodeIfacePreviewGenerateSqlResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkMapResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkMapResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkGenCodeIfacePreviewGenerateSqlResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkGenCodeIfacePreviewGenerateSqlResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

