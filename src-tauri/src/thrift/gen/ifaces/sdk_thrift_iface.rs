// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::thrift::gen::dtos::sdk_request_dto;
use crate::thrift::gen::dtos::sdk_response_dto;

//
// SdkThriftIface service client
//

pub trait TSdkThriftIfaceSyncClient {
  fn get_server_port(&mut self) -> thrift::Result<sdk_response_dto::SdkLongResponseDto>;
  fn get_executable_file_path(&mut self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn get_template_content_by_path(&mut self, path_dto: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto>;
  fn get_template_content_by_include_path(&mut self, template_path_dto: sdk_request_dto::SdkStringRequestDto, include_path: String) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto>;
  fn get_restful_template_file_tree(&mut self) -> thrift::Result<sdk_response_dto::SdkFileTreeResponseDto>;
}

pub trait TSdkThriftIfaceSyncClientMarker {}

pub struct SdkThriftIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> SdkThriftIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> SdkThriftIfaceSyncClient<IP, OP> {
    SdkThriftIfaceSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for SdkThriftIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TSdkThriftIfaceSyncClientMarker for SdkThriftIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TSdkThriftIfaceSyncClientMarker> TSdkThriftIfaceSyncClient for C {
  fn get_server_port(&mut self) -> thrift::Result<sdk_response_dto::SdkLongResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getServerPort", TMessageType::Call, self.sequence_number());
        let call_args = SdkThriftIfaceGetServerPortArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getServerPort", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkThriftIfaceGetServerPortResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn get_executable_file_path(&mut self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getExecutableFilePath", TMessageType::Call, self.sequence_number());
        let call_args = SdkThriftIfaceGetExecutableFilePathArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getExecutableFilePath", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkThriftIfaceGetExecutableFilePathResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn get_template_content_by_path(&mut self, path_dto: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getTemplateContentByPath", TMessageType::Call, self.sequence_number());
        let call_args = SdkThriftIfaceGetTemplateContentByPathArgs { path_dto };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getTemplateContentByPath", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkThriftIfaceGetTemplateContentByPathResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn get_template_content_by_include_path(&mut self, template_path_dto: sdk_request_dto::SdkStringRequestDto, include_path: String) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getTemplateContentByIncludePath", TMessageType::Call, self.sequence_number());
        let call_args = SdkThriftIfaceGetTemplateContentByIncludePathArgs { template_path_dto, include_path };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getTemplateContentByIncludePath", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkThriftIfaceGetTemplateContentByIncludePathResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn get_restful_template_file_tree(&mut self) -> thrift::Result<sdk_response_dto::SdkFileTreeResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getRestfulTemplateFileTree", TMessageType::Call, self.sequence_number());
        let call_args = SdkThriftIfaceGetRestfulTemplateFileTreeArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getRestfulTemplateFileTree", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkThriftIfaceGetRestfulTemplateFileTreeResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// SdkThriftIface service processor
//

pub trait SdkThriftIfaceSyncHandler {
  fn handle_get_server_port(&self) -> thrift::Result<sdk_response_dto::SdkLongResponseDto>;
  fn handle_get_executable_file_path(&self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn handle_get_template_content_by_path(&self, path_dto: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto>;
  fn handle_get_template_content_by_include_path(&self, template_path_dto: sdk_request_dto::SdkStringRequestDto, include_path: String) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto>;
  fn handle_get_restful_template_file_tree(&self) -> thrift::Result<sdk_response_dto::SdkFileTreeResponseDto>;
}

pub struct SdkThriftIfaceSyncProcessor<H: SdkThriftIfaceSyncHandler> {
  handler: H,
}

impl <H: SdkThriftIfaceSyncHandler> SdkThriftIfaceSyncProcessor<H> {
  pub fn new(handler: H) -> SdkThriftIfaceSyncProcessor<H> {
    SdkThriftIfaceSyncProcessor {
      handler,
    }
  }
  fn process_get_server_port(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkThriftIfaceProcessFunctions::process_get_server_port(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_get_executable_file_path(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkThriftIfaceProcessFunctions::process_get_executable_file_path(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_get_template_content_by_path(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkThriftIfaceProcessFunctions::process_get_template_content_by_path(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_get_template_content_by_include_path(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkThriftIfaceProcessFunctions::process_get_template_content_by_include_path(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_get_restful_template_file_tree(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkThriftIfaceProcessFunctions::process_get_restful_template_file_tree(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TSdkThriftIfaceProcessFunctions;

impl TSdkThriftIfaceProcessFunctions {
  pub fn process_get_server_port<H: SdkThriftIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkThriftIfaceGetServerPortArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_server_port() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getServerPort", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkThriftIfaceGetServerPortResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getServerPort", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("getServerPort", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_get_executable_file_path<H: SdkThriftIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkThriftIfaceGetExecutableFilePathArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_executable_file_path() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getExecutableFilePath", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkThriftIfaceGetExecutableFilePathResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getExecutableFilePath", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("getExecutableFilePath", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_get_template_content_by_path<H: SdkThriftIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkThriftIfaceGetTemplateContentByPathArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_template_content_by_path(args.path_dto) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getTemplateContentByPath", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkThriftIfaceGetTemplateContentByPathResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getTemplateContentByPath", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("getTemplateContentByPath", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_get_template_content_by_include_path<H: SdkThriftIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkThriftIfaceGetTemplateContentByIncludePathArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_template_content_by_include_path(args.template_path_dto, args.include_path) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getTemplateContentByIncludePath", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkThriftIfaceGetTemplateContentByIncludePathResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getTemplateContentByIncludePath", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("getTemplateContentByIncludePath", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_get_restful_template_file_tree<H: SdkThriftIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkThriftIfaceGetRestfulTemplateFileTreeArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_restful_template_file_tree() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getRestfulTemplateFileTree", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkThriftIfaceGetRestfulTemplateFileTreeResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getRestfulTemplateFileTree", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("getRestfulTemplateFileTree", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: SdkThriftIfaceSyncHandler> TProcessor for SdkThriftIfaceSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "getServerPort" => {
        self.process_get_server_port(message_ident.sequence_number, i_prot, o_prot)
      },
      "getExecutableFilePath" => {
        self.process_get_executable_file_path(message_ident.sequence_number, i_prot, o_prot)
      },
      "getTemplateContentByPath" => {
        self.process_get_template_content_by_path(message_ident.sequence_number, i_prot, o_prot)
      },
      "getTemplateContentByIncludePath" => {
        self.process_get_template_content_by_include_path(message_ident.sequence_number, i_prot, o_prot)
      },
      "getRestfulTemplateFileTree" => {
        self.process_get_restful_template_file_tree(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// SdkThriftIfaceGetServerPortArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetServerPortArgs {
}

impl SdkThriftIfaceGetServerPortArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetServerPortArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetServerPortArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getServerPort_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetServerPortResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetServerPortResult {
  result_value: Option<sdk_response_dto::SdkLongResponseDto>,
}

impl SdkThriftIfaceGetServerPortResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkLongResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkThriftIfaceGetServerPort"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetServerPortResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkLongResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkLongResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetServerPortResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkThriftIfaceGetServerPortResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetExecutableFilePathArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetExecutableFilePathArgs {
}

impl SdkThriftIfaceGetExecutableFilePathArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetExecutableFilePathArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetExecutableFilePathArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getExecutableFilePath_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetExecutableFilePathResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetExecutableFilePathResult {
  result_value: Option<sdk_response_dto::SdkStringResponseDto>,
}

impl SdkThriftIfaceGetExecutableFilePathResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkThriftIfaceGetExecutableFilePath"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetExecutableFilePathResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkStringResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkStringResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetExecutableFilePathResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkThriftIfaceGetExecutableFilePathResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetTemplateContentByPathArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetTemplateContentByPathArgs {
  path_dto: sdk_request_dto::SdkStringRequestDto,
}

impl SdkThriftIfaceGetTemplateContentByPathArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetTemplateContentByPathArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkStringRequestDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkStringRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkThriftIfaceGetTemplateContentByPathArgs.path_dto", &f_1)?;
    let ret = SdkThriftIfaceGetTemplateContentByPathArgs {
      path_dto: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getTemplateContentByPath_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("pathDto", TType::Struct, 1))?;
    self.path_dto.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetTemplateContentByPathResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetTemplateContentByPathResult {
  result_value: Option<sdk_response_dto::SdkCodeTemplateResponseDto>,
}

impl SdkThriftIfaceGetTemplateContentByPathResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkThriftIfaceGetTemplateContentByPath"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetTemplateContentByPathResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkCodeTemplateResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkCodeTemplateResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetTemplateContentByPathResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkThriftIfaceGetTemplateContentByPathResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetTemplateContentByIncludePathArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetTemplateContentByIncludePathArgs {
  template_path_dto: sdk_request_dto::SdkStringRequestDto,
  include_path: String,
}

impl SdkThriftIfaceGetTemplateContentByIncludePathArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetTemplateContentByIncludePathArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkStringRequestDto> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkStringRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkThriftIfaceGetTemplateContentByIncludePathArgs.template_path_dto", &f_1)?;
    verify_required_field_exists("SdkThriftIfaceGetTemplateContentByIncludePathArgs.include_path", &f_2)?;
    let ret = SdkThriftIfaceGetTemplateContentByIncludePathArgs {
      template_path_dto: f_1.expect("auto-generated code should have checked for presence of required fields"),
      include_path: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getTemplateContentByIncludePath_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("templatePathDto", TType::Struct, 1))?;
    self.template_path_dto.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("includePath", TType::String, 2))?;
    o_prot.write_string(&self.include_path)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetTemplateContentByIncludePathResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetTemplateContentByIncludePathResult {
  result_value: Option<sdk_response_dto::SdkCodeTemplateResponseDto>,
}

impl SdkThriftIfaceGetTemplateContentByIncludePathResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkCodeTemplateResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkThriftIfaceGetTemplateContentByIncludePath"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetTemplateContentByIncludePathResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkCodeTemplateResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkCodeTemplateResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetTemplateContentByIncludePathResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkThriftIfaceGetTemplateContentByIncludePathResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetRestfulTemplateFileTreeArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetRestfulTemplateFileTreeArgs {
}

impl SdkThriftIfaceGetRestfulTemplateFileTreeArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetRestfulTemplateFileTreeArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetRestfulTemplateFileTreeArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getRestfulTemplateFileTree_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkThriftIfaceGetRestfulTemplateFileTreeResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkThriftIfaceGetRestfulTemplateFileTreeResult {
  result_value: Option<sdk_response_dto::SdkFileTreeResponseDto>,
}

impl SdkThriftIfaceGetRestfulTemplateFileTreeResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkFileTreeResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkThriftIfaceGetRestfulTemplateFileTree"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkThriftIfaceGetRestfulTemplateFileTreeResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkFileTreeResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkFileTreeResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkThriftIfaceGetRestfulTemplateFileTreeResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkThriftIfaceGetRestfulTemplateFileTreeResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

