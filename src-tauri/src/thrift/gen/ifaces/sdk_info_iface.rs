// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::thrift::gen::dtos::sdk_request_dto;
use crate::thrift::gen::dtos::sdk_response_dto;

//
// SdkInfoIface service client
//

pub trait TSdkInfoIfaceSyncClient {
  fn check_thrift_err(&mut self) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn check_rest_api_implements(&mut self) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn check_rpc_implements(&mut self) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn get_java_namespace(&mut self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn delete_file(&mut self, file_path: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn create_or_update_file(&mut self, file_path: sdk_request_dto::SdkStringRequestDto, file_content: String) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn create_folder(&mut self, folder_path: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn rename_file(&mut self, file_path: sdk_request_dto::SdkStringRequestDto, new_path: String) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
}

pub trait TSdkInfoIfaceSyncClientMarker {}

pub struct SdkInfoIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> SdkInfoIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> SdkInfoIfaceSyncClient<IP, OP> {
    SdkInfoIfaceSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for SdkInfoIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> TSdkInfoIfaceSyncClientMarker for SdkInfoIfaceSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + TSdkInfoIfaceSyncClientMarker> TSdkInfoIfaceSyncClient for C {
  fn check_thrift_err(&mut self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("checkThriftErr", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceCheckThriftErrArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("checkThriftErr", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceCheckThriftErrResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn check_rest_api_implements(&mut self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("checkRestApiImplements", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceCheckRestApiImplementsArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("checkRestApiImplements", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceCheckRestApiImplementsResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn check_rpc_implements(&mut self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("checkRpcImplements", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceCheckRpcImplementsArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("checkRpcImplements", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceCheckRpcImplementsResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn get_java_namespace(&mut self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("getJavaNamespace", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceGetJavaNamespaceArgs {  };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("getJavaNamespace", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceGetJavaNamespaceResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn delete_file(&mut self, file_path: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("deleteFile", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceDeleteFileArgs { file_path };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("deleteFile", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceDeleteFileResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn create_or_update_file(&mut self, file_path: sdk_request_dto::SdkStringRequestDto, file_content: String) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("createOrUpdateFile", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceCreateOrUpdateFileArgs { file_path, file_content };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("createOrUpdateFile", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceCreateOrUpdateFileResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn create_folder(&mut self, folder_path: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("createFolder", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceCreateFolderArgs { folder_path };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("createFolder", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceCreateFolderResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn rename_file(&mut self, file_path: sdk_request_dto::SdkStringRequestDto, new_path: String) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("renameFile", TMessageType::Call, self.sequence_number());
        let call_args = SdkInfoIfaceRenameFileArgs { file_path, new_path };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("renameFile", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = SdkInfoIfaceRenameFileResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// SdkInfoIface service processor
//

pub trait SdkInfoIfaceSyncHandler {
  fn handle_check_thrift_err(&self) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn handle_check_rest_api_implements(&self) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn handle_check_rpc_implements(&self) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn handle_get_java_namespace(&self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn handle_delete_file(&self, file_path: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkListResponseDto>;
  fn handle_create_or_update_file(&self, file_path: sdk_request_dto::SdkStringRequestDto, file_content: String) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn handle_create_folder(&self, folder_path: sdk_request_dto::SdkStringRequestDto) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
  fn handle_rename_file(&self, file_path: sdk_request_dto::SdkStringRequestDto, new_path: String) -> thrift::Result<sdk_response_dto::SdkStringResponseDto>;
}

pub struct SdkInfoIfaceSyncProcessor<H: SdkInfoIfaceSyncHandler> {
  handler: H,
}

impl <H: SdkInfoIfaceSyncHandler> SdkInfoIfaceSyncProcessor<H> {
  pub fn new(handler: H) -> SdkInfoIfaceSyncProcessor<H> {
    SdkInfoIfaceSyncProcessor {
      handler,
    }
  }
  fn process_check_thrift_err(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_check_thrift_err(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_check_rest_api_implements(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_check_rest_api_implements(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_check_rpc_implements(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_check_rpc_implements(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_get_java_namespace(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_get_java_namespace(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_delete_file(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_delete_file(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_create_or_update_file(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_create_or_update_file(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_create_folder(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_create_folder(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_rename_file(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    TSdkInfoIfaceProcessFunctions::process_rename_file(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct TSdkInfoIfaceProcessFunctions;

impl TSdkInfoIfaceProcessFunctions {
  pub fn process_check_thrift_err<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkInfoIfaceCheckThriftErrArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_check_thrift_err() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("checkThriftErr", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceCheckThriftErrResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("checkThriftErr", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("checkThriftErr", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_check_rest_api_implements<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkInfoIfaceCheckRestApiImplementsArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_check_rest_api_implements() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("checkRestApiImplements", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceCheckRestApiImplementsResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("checkRestApiImplements", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("checkRestApiImplements", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_check_rpc_implements<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkInfoIfaceCheckRpcImplementsArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_check_rpc_implements() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("checkRpcImplements", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceCheckRpcImplementsResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("checkRpcImplements", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("checkRpcImplements", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_get_java_namespace<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let _ = SdkInfoIfaceGetJavaNamespaceArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_get_java_namespace() {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("getJavaNamespace", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceGetJavaNamespaceResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("getJavaNamespace", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("getJavaNamespace", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_delete_file<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkInfoIfaceDeleteFileArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_delete_file(args.file_path) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("deleteFile", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceDeleteFileResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("deleteFile", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("deleteFile", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_create_or_update_file<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkInfoIfaceCreateOrUpdateFileArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_create_or_update_file(args.file_path, args.file_content) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("createOrUpdateFile", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceCreateOrUpdateFileResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("createOrUpdateFile", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("createOrUpdateFile", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_create_folder<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkInfoIfaceCreateFolderArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_create_folder(args.folder_path) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("createFolder", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceCreateFolderResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("createFolder", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("createFolder", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_rename_file<H: SdkInfoIfaceSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = SdkInfoIfaceRenameFileArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_rename_file(args.file_path, args.new_path) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("renameFile", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = SdkInfoIfaceRenameFileResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("renameFile", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("renameFile", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: SdkInfoIfaceSyncHandler> TProcessor for SdkInfoIfaceSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "checkThriftErr" => {
        self.process_check_thrift_err(message_ident.sequence_number, i_prot, o_prot)
      },
      "checkRestApiImplements" => {
        self.process_check_rest_api_implements(message_ident.sequence_number, i_prot, o_prot)
      },
      "checkRpcImplements" => {
        self.process_check_rpc_implements(message_ident.sequence_number, i_prot, o_prot)
      },
      "getJavaNamespace" => {
        self.process_get_java_namespace(message_ident.sequence_number, i_prot, o_prot)
      },
      "deleteFile" => {
        self.process_delete_file(message_ident.sequence_number, i_prot, o_prot)
      },
      "createOrUpdateFile" => {
        self.process_create_or_update_file(message_ident.sequence_number, i_prot, o_prot)
      },
      "createFolder" => {
        self.process_create_folder(message_ident.sequence_number, i_prot, o_prot)
      },
      "renameFile" => {
        self.process_rename_file(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// SdkInfoIfaceCheckThriftErrArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCheckThriftErrArgs {
}

impl SdkInfoIfaceCheckThriftErrArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCheckThriftErrArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCheckThriftErrArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("checkThriftErr_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCheckThriftErrResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCheckThriftErrResult {
  result_value: Option<sdk_response_dto::SdkListResponseDto>,
}

impl SdkInfoIfaceCheckThriftErrResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceCheckThriftErr"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCheckThriftErrResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkListResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkListResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCheckThriftErrResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceCheckThriftErrResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCheckRestApiImplementsArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCheckRestApiImplementsArgs {
}

impl SdkInfoIfaceCheckRestApiImplementsArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCheckRestApiImplementsArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCheckRestApiImplementsArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("checkRestApiImplements_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCheckRestApiImplementsResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCheckRestApiImplementsResult {
  result_value: Option<sdk_response_dto::SdkListResponseDto>,
}

impl SdkInfoIfaceCheckRestApiImplementsResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceCheckRestApiImplements"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCheckRestApiImplementsResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkListResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkListResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCheckRestApiImplementsResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceCheckRestApiImplementsResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCheckRpcImplementsArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCheckRpcImplementsArgs {
}

impl SdkInfoIfaceCheckRpcImplementsArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCheckRpcImplementsArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCheckRpcImplementsArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("checkRpcImplements_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCheckRpcImplementsResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCheckRpcImplementsResult {
  result_value: Option<sdk_response_dto::SdkListResponseDto>,
}

impl SdkInfoIfaceCheckRpcImplementsResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceCheckRpcImplements"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCheckRpcImplementsResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkListResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkListResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCheckRpcImplementsResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceCheckRpcImplementsResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceGetJavaNamespaceArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceGetJavaNamespaceArgs {
}

impl SdkInfoIfaceGetJavaNamespaceArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceGetJavaNamespaceArgs> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceGetJavaNamespaceArgs {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("getJavaNamespace_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceGetJavaNamespaceResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceGetJavaNamespaceResult {
  result_value: Option<sdk_response_dto::SdkStringResponseDto>,
}

impl SdkInfoIfaceGetJavaNamespaceResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceGetJavaNamespace"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceGetJavaNamespaceResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkStringResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkStringResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceGetJavaNamespaceResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceGetJavaNamespaceResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceDeleteFileArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceDeleteFileArgs {
  file_path: sdk_request_dto::SdkStringRequestDto,
}

impl SdkInfoIfaceDeleteFileArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceDeleteFileArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkStringRequestDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkStringRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkInfoIfaceDeleteFileArgs.file_path", &f_1)?;
    let ret = SdkInfoIfaceDeleteFileArgs {
      file_path: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("deleteFile_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("filePath", TType::Struct, 1))?;
    self.file_path.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceDeleteFileResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceDeleteFileResult {
  result_value: Option<sdk_response_dto::SdkListResponseDto>,
}

impl SdkInfoIfaceDeleteFileResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkListResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceDeleteFile"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceDeleteFileResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkListResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkListResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceDeleteFileResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceDeleteFileResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCreateOrUpdateFileArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCreateOrUpdateFileArgs {
  file_path: sdk_request_dto::SdkStringRequestDto,
  file_content: String,
}

impl SdkInfoIfaceCreateOrUpdateFileArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCreateOrUpdateFileArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkStringRequestDto> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkStringRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkInfoIfaceCreateOrUpdateFileArgs.file_path", &f_1)?;
    verify_required_field_exists("SdkInfoIfaceCreateOrUpdateFileArgs.file_content", &f_2)?;
    let ret = SdkInfoIfaceCreateOrUpdateFileArgs {
      file_path: f_1.expect("auto-generated code should have checked for presence of required fields"),
      file_content: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("createOrUpdateFile_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("filePath", TType::Struct, 1))?;
    self.file_path.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("fileContent", TType::String, 2))?;
    o_prot.write_string(&self.file_content)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCreateOrUpdateFileResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCreateOrUpdateFileResult {
  result_value: Option<sdk_response_dto::SdkStringResponseDto>,
}

impl SdkInfoIfaceCreateOrUpdateFileResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceCreateOrUpdateFile"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCreateOrUpdateFileResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkStringResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkStringResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCreateOrUpdateFileResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceCreateOrUpdateFileResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCreateFolderArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCreateFolderArgs {
  folder_path: sdk_request_dto::SdkStringRequestDto,
}

impl SdkInfoIfaceCreateFolderArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCreateFolderArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkStringRequestDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkStringRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkInfoIfaceCreateFolderArgs.folder_path", &f_1)?;
    let ret = SdkInfoIfaceCreateFolderArgs {
      folder_path: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("createFolder_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("folderPath", TType::Struct, 1))?;
    self.folder_path.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceCreateFolderResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceCreateFolderResult {
  result_value: Option<sdk_response_dto::SdkStringResponseDto>,
}

impl SdkInfoIfaceCreateFolderResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceCreateFolder"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceCreateFolderResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkStringResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkStringResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceCreateFolderResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceCreateFolderResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceRenameFileArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceRenameFileArgs {
  file_path: sdk_request_dto::SdkStringRequestDto,
  new_path: String,
}

impl SdkInfoIfaceRenameFileArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceRenameFileArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<sdk_request_dto::SdkStringRequestDto> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = sdk_request_dto::SdkStringRequestDto::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkInfoIfaceRenameFileArgs.file_path", &f_1)?;
    verify_required_field_exists("SdkInfoIfaceRenameFileArgs.new_path", &f_2)?;
    let ret = SdkInfoIfaceRenameFileArgs {
      file_path: f_1.expect("auto-generated code should have checked for presence of required fields"),
      new_path: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("renameFile_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("filePath", TType::Struct, 1))?;
    self.file_path.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("newPath", TType::String, 2))?;
    o_prot.write_string(&self.new_path)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkInfoIfaceRenameFileResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct SdkInfoIfaceRenameFileResult {
  result_value: Option<sdk_response_dto::SdkStringResponseDto>,
}

impl SdkInfoIfaceRenameFileResult {
  fn ok_or(self) -> thrift::Result<sdk_response_dto::SdkStringResponseDto> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for SdkInfoIfaceRenameFile"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkInfoIfaceRenameFileResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<sdk_response_dto::SdkStringResponseDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = sdk_response_dto::SdkStringResponseDto::read_from_in_protocol(i_prot)?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = SdkInfoIfaceRenameFileResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkInfoIfaceRenameFileResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Struct, 0))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

