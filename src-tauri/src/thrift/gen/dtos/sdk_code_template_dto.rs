// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

//
// SdkCodeTemplateDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkCodeTemplateDto {
  pub file_path: String,
  pub file_separator: String,
  pub namespace: BTreeMap<String, String>,
  pub ast: Option<String>,
  pub content: String,
  pub imports: BTreeMap<String, Box<SdkCodeTemplateDto>>,
}

impl SdkCodeTemplateDto {
  pub fn new<F4>(file_path: String, file_separator: String, namespace: BTreeMap<String, String>, ast: F4, content: String, imports: BTreeMap<String, Box<SdkCodeTemplateDto>>) -> SdkCodeTemplateDto where F4: Into<Option<String>> {
    SdkCodeTemplateDto {
      file_path,
      file_separator,
      namespace,
      ast: ast.into(),
      content,
      imports,
    }
  }
}

impl TSerializable for SdkCodeTemplateDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkCodeTemplateDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<BTreeMap<String, String>> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<String> = None;
    let mut f_6: Option<BTreeMap<String, Box<SdkCodeTemplateDto>>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let map_ident = i_prot.read_map_begin()?;
          let mut val: BTreeMap<String, String> = BTreeMap::new();
          for _ in 0..map_ident.size {
            let map_key_0 = i_prot.read_string()?;
            let map_val_1 = i_prot.read_string()?;
            val.insert(map_key_0, map_val_1);
          }
          i_prot.read_map_end()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        6 => {
          let map_ident = i_prot.read_map_begin()?;
          let mut val: BTreeMap<String, Box<SdkCodeTemplateDto>> = BTreeMap::new();
          for _ in 0..map_ident.size {
            let map_key_2 = i_prot.read_string()?;
            let map_val_3 = Box::new(SdkCodeTemplateDto::read_from_in_protocol(i_prot)?);
            val.insert(map_key_2, map_val_3);
          }
          i_prot.read_map_end()?;
          f_6 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkCodeTemplateDto.file_path", &f_1)?;
    verify_required_field_exists("SdkCodeTemplateDto.file_separator", &f_2)?;
    verify_required_field_exists("SdkCodeTemplateDto.namespace", &f_3)?;
    verify_required_field_exists("SdkCodeTemplateDto.content", &f_5)?;
    verify_required_field_exists("SdkCodeTemplateDto.imports", &f_6)?;
    let ret = SdkCodeTemplateDto {
      file_path: f_1.expect("auto-generated code should have checked for presence of required fields"),
      file_separator: f_2.expect("auto-generated code should have checked for presence of required fields"),
      namespace: f_3.expect("auto-generated code should have checked for presence of required fields"),
      ast: f_4,
      content: f_5.expect("auto-generated code should have checked for presence of required fields"),
      imports: f_6.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkCodeTemplateDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("filePath", TType::String, 1))?;
    o_prot.write_string(&self.file_path)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("fileSeparator", TType::String, 2))?;
    o_prot.write_string(&self.file_separator)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("namespace", TType::Map, 3))?;
    o_prot.write_map_begin(&TMapIdentifier::new(TType::String, TType::String, self.namespace.len() as i32))?;
    for (k, v) in &self.namespace {
      o_prot.write_string(k)?;
      o_prot.write_string(v)?;
    }
    o_prot.write_map_end()?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.ast {
      o_prot.write_field_begin(&TFieldIdentifier::new("ast", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("content", TType::String, 5))?;
    o_prot.write_string(&self.content)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("imports", TType::Map, 6))?;
    o_prot.write_map_begin(&TMapIdentifier::new(TType::String, TType::Struct, self.imports.len() as i32))?;
    for (k, v) in &self.imports {
      o_prot.write_string(k)?;
      v.write_to_out_protocol(o_prot)?;
    }
    o_prot.write_map_end()?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

