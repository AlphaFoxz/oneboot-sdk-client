// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::thrift::gen::dtos::sdk_code_template_dto;
use crate::thrift::gen::dtos::sdk_file_info_dto;

//
// SdkListResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkListResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<Vec<String>>,
}

impl SdkListResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkListResponseDto where F4: Into<Option<String>>, F5: Into<Option<Vec<String>>> {
    SdkListResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkListResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkListResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<Vec<String>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<String> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = i_prot.read_string()?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkListResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkListResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkListResponseDto.success", &f_3)?;
    let ret = SdkListResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkListResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::List, 5))?;
      o_prot.write_list_begin(&TListIdentifier::new(TType::String, fld_var.len() as i32))?;
      for e in fld_var {
        o_prot.write_string(e)?;
      }
      o_prot.write_list_end()?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkMapResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkMapResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<BTreeMap<String, String>>,
}

impl SdkMapResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkMapResponseDto where F4: Into<Option<String>>, F5: Into<Option<BTreeMap<String, String>>> {
    SdkMapResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkMapResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkMapResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<BTreeMap<String, String>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let map_ident = i_prot.read_map_begin()?;
          let mut val: BTreeMap<String, String> = BTreeMap::new();
          for _ in 0..map_ident.size {
            let map_key_1 = i_prot.read_string()?;
            let map_val_2 = i_prot.read_string()?;
            val.insert(map_key_1, map_val_2);
          }
          i_prot.read_map_end()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkMapResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkMapResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkMapResponseDto.success", &f_3)?;
    let ret = SdkMapResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkMapResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::Map, 5))?;
      o_prot.write_map_begin(&TMapIdentifier::new(TType::String, TType::String, fld_var.len() as i32))?;
      for (k, v) in fld_var {
        o_prot.write_string(k)?;
        o_prot.write_string(v)?;
      }
      o_prot.write_map_end()?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkLongResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Deserialize)]
pub struct SdkLongResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<i64>,
}

impl SdkLongResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkLongResponseDto where F4: Into<Option<String>>, F5: Into<Option<i64>> {
    SdkLongResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkLongResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkLongResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_i64()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkLongResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkLongResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkLongResponseDto.success", &f_3)?;
    let ret = SdkLongResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkLongResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::I64, 5))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkDoubleResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkDoubleResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<OrderedFloat<f64>>,
}

impl SdkDoubleResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkDoubleResponseDto where F4: Into<Option<String>>, F5: Into<Option<OrderedFloat<f64>>> {
    SdkDoubleResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkDoubleResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkDoubleResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<OrderedFloat<f64>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = OrderedFloat::from(i_prot.read_double()?);
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkDoubleResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkDoubleResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkDoubleResponseDto.success", &f_3)?;
    let ret = SdkDoubleResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkDoubleResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::Double, 5))?;
      o_prot.write_double(fld_var.into())?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkBinaryResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkBinaryResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<Vec<u8>>,
}

impl SdkBinaryResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkBinaryResponseDto where F4: Into<Option<String>>, F5: Into<Option<Vec<u8>>> {
    SdkBinaryResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkBinaryResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkBinaryResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<Vec<u8>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_bytes()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkBinaryResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkBinaryResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkBinaryResponseDto.success", &f_3)?;
    let ret = SdkBinaryResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkBinaryResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 5))?;
      o_prot.write_bytes(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkStringResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkStringResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<String>,
}

impl SdkStringResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkStringResponseDto where F4: Into<Option<String>>, F5: Into<Option<String>> {
    SdkStringResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkStringResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkStringResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkStringResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkStringResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkStringResponseDto.success", &f_3)?;
    let ret = SdkStringResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkStringResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 5))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkCodeTemplateResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkCodeTemplateResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<sdk_code_template_dto::SdkCodeTemplateDto>,
}

impl SdkCodeTemplateResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkCodeTemplateResponseDto where F4: Into<Option<String>>, F5: Into<Option<sdk_code_template_dto::SdkCodeTemplateDto>> {
    SdkCodeTemplateResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkCodeTemplateResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkCodeTemplateResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<sdk_code_template_dto::SdkCodeTemplateDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = sdk_code_template_dto::SdkCodeTemplateDto::read_from_in_protocol(i_prot)?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkCodeTemplateResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkCodeTemplateResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkCodeTemplateResponseDto.success", &f_3)?;
    let ret = SdkCodeTemplateResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkCodeTemplateResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::Struct, 5))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkFileTreeResponseDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkFileTreeResponseDto {
  pub id: i64,
  pub task_id: i64,
  pub success: bool,
  pub message: Option<String>,
  pub data: Option<sdk_file_info_dto::SdkFileInfoDto>,
}

impl SdkFileTreeResponseDto {
  pub fn new<F4, F5>(id: i64, task_id: i64, success: bool, message: F4, data: F5) -> SdkFileTreeResponseDto where F4: Into<Option<String>>, F5: Into<Option<sdk_file_info_dto::SdkFileInfoDto>> {
    SdkFileTreeResponseDto {
      id,
      task_id,
      success,
      message: message.into(),
      data: data.into(),
    }
  }
}

impl TSerializable for SdkFileTreeResponseDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkFileTreeResponseDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<bool> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<sdk_file_info_dto::SdkFileInfoDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_bool()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = sdk_file_info_dto::SdkFileInfoDto::read_from_in_protocol(i_prot)?;
          f_5 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkFileTreeResponseDto.id", &f_1)?;
    verify_required_field_exists("SdkFileTreeResponseDto.task_id", &f_2)?;
    verify_required_field_exists("SdkFileTreeResponseDto.success", &f_3)?;
    let ret = SdkFileTreeResponseDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      success: f_3.expect("auto-generated code should have checked for presence of required fields"),
      message: f_4,
      data: f_5,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkFileTreeResponseDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("success", TType::Bool, 3))?;
    o_prot.write_bool(self.success)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::String, 4))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.data {
      o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::Struct, 5))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

