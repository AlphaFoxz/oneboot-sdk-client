// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::thrift::gen::dtos::sdk_code_template_dto;

//
// SdkListRequestDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkListRequestDto {
  pub id: i64,
  pub task_id: i64,
  pub data: Vec<String>,
}

impl SdkListRequestDto {
  pub fn new(id: i64, task_id: i64, data: Vec<String>) -> SdkListRequestDto {
    SdkListRequestDto {
      id,
      task_id,
      data,
    }
  }
}

impl TSerializable for SdkListRequestDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkListRequestDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<Vec<String>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<String> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = i_prot.read_string()?;
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkListRequestDto.id", &f_1)?;
    verify_required_field_exists("SdkListRequestDto.task_id", &f_2)?;
    verify_required_field_exists("SdkListRequestDto.data", &f_3)?;
    let ret = SdkListRequestDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      data: f_3.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkListRequestDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::List, 3))?;
    o_prot.write_list_begin(&TListIdentifier::new(TType::String, self.data.len() as i32))?;
    for e in &self.data {
      o_prot.write_string(e)?;
    }
    o_prot.write_list_end()?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkMapRequestDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkMapRequestDto {
  pub id: i64,
  pub task_id: i64,
  pub data: BTreeMap<String, String>,
}

impl SdkMapRequestDto {
  pub fn new(id: i64, task_id: i64, data: BTreeMap<String, String>) -> SdkMapRequestDto {
    SdkMapRequestDto {
      id,
      task_id,
      data,
    }
  }
}

impl TSerializable for SdkMapRequestDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkMapRequestDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<BTreeMap<String, String>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let map_ident = i_prot.read_map_begin()?;
          let mut val: BTreeMap<String, String> = BTreeMap::new();
          for _ in 0..map_ident.size {
            let map_key_1 = i_prot.read_string()?;
            let map_val_2 = i_prot.read_string()?;
            val.insert(map_key_1, map_val_2);
          }
          i_prot.read_map_end()?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkMapRequestDto.id", &f_1)?;
    verify_required_field_exists("SdkMapRequestDto.task_id", &f_2)?;
    verify_required_field_exists("SdkMapRequestDto.data", &f_3)?;
    let ret = SdkMapRequestDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      data: f_3.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkMapRequestDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::Map, 3))?;
    o_prot.write_map_begin(&TMapIdentifier::new(TType::String, TType::String, self.data.len() as i32))?;
    for (k, v) in &self.data {
      o_prot.write_string(k)?;
      o_prot.write_string(v)?;
    }
    o_prot.write_map_end()?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkStringRequestDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkStringRequestDto {
  pub id: i64,
  pub task_id: i64,
  pub data: String,
}

impl SdkStringRequestDto {
  pub fn new(id: i64, task_id: i64, data: String) -> SdkStringRequestDto {
    SdkStringRequestDto {
      id,
      task_id,
      data,
    }
  }
}

impl TSerializable for SdkStringRequestDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkStringRequestDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkStringRequestDto.id", &f_1)?;
    verify_required_field_exists("SdkStringRequestDto.task_id", &f_2)?;
    verify_required_field_exists("SdkStringRequestDto.data", &f_3)?;
    let ret = SdkStringRequestDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      data: f_3.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkStringRequestDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::String, 3))?;
    o_prot.write_string(&self.data)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkLongRequestDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkLongRequestDto {
  pub id: i64,
  pub task_id: i64,
  pub data: i64,
}

impl SdkLongRequestDto {
  pub fn new(id: i64, task_id: i64, data: i64) -> SdkLongRequestDto {
    SdkLongRequestDto {
      id,
      task_id,
      data,
    }
  }
}

impl TSerializable for SdkLongRequestDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkLongRequestDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<i64> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_i64()?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkLongRequestDto.id", &f_1)?;
    verify_required_field_exists("SdkLongRequestDto.task_id", &f_2)?;
    verify_required_field_exists("SdkLongRequestDto.data", &f_3)?;
    let ret = SdkLongRequestDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      data: f_3.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkLongRequestDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::I64, 3))?;
    o_prot.write_i64(self.data)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// SdkCodeTemplateRequestDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct SdkCodeTemplateRequestDto {
  pub id: i64,
  pub task_id: i64,
  pub data: sdk_code_template_dto::SdkCodeTemplateDto,
}

impl SdkCodeTemplateRequestDto {
  pub fn new(id: i64, task_id: i64, data: sdk_code_template_dto::SdkCodeTemplateDto) -> SdkCodeTemplateRequestDto {
    SdkCodeTemplateRequestDto {
      id,
      task_id,
      data,
    }
  }
}

impl TSerializable for SdkCodeTemplateRequestDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkCodeTemplateRequestDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<i64> = None;
    let mut f_2: Option<i64> = None;
    let mut f_3: Option<sdk_code_template_dto::SdkCodeTemplateDto> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_i64()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = sdk_code_template_dto::SdkCodeTemplateDto::read_from_in_protocol(i_prot)?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkCodeTemplateRequestDto.id", &f_1)?;
    verify_required_field_exists("SdkCodeTemplateRequestDto.task_id", &f_2)?;
    verify_required_field_exists("SdkCodeTemplateRequestDto.data", &f_3)?;
    let ret = SdkCodeTemplateRequestDto {
      id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      task_id: f_2.expect("auto-generated code should have checked for presence of required fields"),
      data: f_3.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkCodeTemplateRequestDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("id", TType::I64, 1))?;
    o_prot.write_i64(self.id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("taskId", TType::I64, 2))?;
    o_prot.write_i64(self.task_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("data", TType::Struct, 3))?;
    self.data.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

