// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::thrift::gen::enums::sdk_file_type_enum;

//
// SdkFileInfoDto
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd, serde::Serialize)]
pub struct SdkFileInfoDto {
  pub file_path: String,
  pub parent_dir: String,
  pub file_name: String,
  pub separator: String,
  pub content: Option<String>,
  pub ext: Option<String>,
  pub file_type: sdk_file_type_enum::SdkFileTypeEnum,
  pub is_read_only: bool,
  pub is_empty: bool,
  pub children: Option<Vec<Box<SdkFileInfoDto>>>,
}

impl SdkFileInfoDto {
  pub fn new<F5, F6, F10>(file_path: String, parent_dir: String, file_name: String, separator: String, content: F5, ext: F6, file_type: sdk_file_type_enum::SdkFileTypeEnum, is_read_only: bool, is_empty: bool, children: F10) -> SdkFileInfoDto where F5: Into<Option<String>>, F6: Into<Option<String>>, F10: Into<Option<Vec<Box<SdkFileInfoDto>>>> {
    SdkFileInfoDto {
      file_path,
      parent_dir,
      file_name,
      separator,
      content: content.into(),
      ext: ext.into(),
      file_type,
      is_read_only,
      is_empty,
      children: children.into(),
    }
  }
}

impl TSerializable for SdkFileInfoDto {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<SdkFileInfoDto> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<String> = None;
    let mut f_4: Option<String> = None;
    let mut f_5: Option<String> = None;
    let mut f_6: Option<String> = None;
    let mut f_7: Option<sdk_file_type_enum::SdkFileTypeEnum> = None;
    let mut f_8: Option<bool> = None;
    let mut f_9: Option<bool> = None;
    let mut f_10: Option<Vec<Box<SdkFileInfoDto>>> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_string()?;
          f_4 = Some(val);
        },
        5 => {
          let val = i_prot.read_string()?;
          f_5 = Some(val);
        },
        6 => {
          let val = i_prot.read_string()?;
          f_6 = Some(val);
        },
        7 => {
          let val = sdk_file_type_enum::SdkFileTypeEnum::read_from_in_protocol(i_prot)?;
          f_7 = Some(val);
        },
        8 => {
          let val = i_prot.read_bool()?;
          f_8 = Some(val);
        },
        9 => {
          let val = i_prot.read_bool()?;
          f_9 = Some(val);
        },
        10 => {
          let list_ident = i_prot.read_list_begin()?;
          let mut val: Vec<Box<SdkFileInfoDto>> = Vec::with_capacity(list_ident.size as usize);
          for _ in 0..list_ident.size {
            let list_elem_0 = Box::new(SdkFileInfoDto::read_from_in_protocol(i_prot)?);
            val.push(list_elem_0);
          }
          i_prot.read_list_end()?;
          f_10 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("SdkFileInfoDto.file_path", &f_1)?;
    verify_required_field_exists("SdkFileInfoDto.parent_dir", &f_2)?;
    verify_required_field_exists("SdkFileInfoDto.file_name", &f_3)?;
    verify_required_field_exists("SdkFileInfoDto.separator", &f_4)?;
    verify_required_field_exists("SdkFileInfoDto.file_type", &f_7)?;
    verify_required_field_exists("SdkFileInfoDto.is_read_only", &f_8)?;
    verify_required_field_exists("SdkFileInfoDto.is_empty", &f_9)?;
    let ret = SdkFileInfoDto {
      file_path: f_1.expect("auto-generated code should have checked for presence of required fields"),
      parent_dir: f_2.expect("auto-generated code should have checked for presence of required fields"),
      file_name: f_3.expect("auto-generated code should have checked for presence of required fields"),
      separator: f_4.expect("auto-generated code should have checked for presence of required fields"),
      content: f_5,
      ext: f_6,
      file_type: f_7.expect("auto-generated code should have checked for presence of required fields"),
      is_read_only: f_8.expect("auto-generated code should have checked for presence of required fields"),
      is_empty: f_9.expect("auto-generated code should have checked for presence of required fields"),
      children: f_10,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("SdkFileInfoDto");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("filePath", TType::String, 1))?;
    o_prot.write_string(&self.file_path)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("parentDir", TType::String, 2))?;
    o_prot.write_string(&self.parent_dir)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("fileName", TType::String, 3))?;
    o_prot.write_string(&self.file_name)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("separator", TType::String, 4))?;
    o_prot.write_string(&self.separator)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.content {
      o_prot.write_field_begin(&TFieldIdentifier::new("content", TType::String, 5))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.ext {
      o_prot.write_field_begin(&TFieldIdentifier::new("ext", TType::String, 6))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_begin(&TFieldIdentifier::new("fileType", TType::I32, 7))?;
    self.file_type.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("isReadOnly", TType::Bool, 8))?;
    o_prot.write_bool(self.is_read_only)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("isEmpty", TType::Bool, 9))?;
    o_prot.write_bool(self.is_empty)?;
    o_prot.write_field_end()?;
    if let Some(ref fld_var) = self.children {
      o_prot.write_field_begin(&TFieldIdentifier::new("children", TType::List, 10))?;
      o_prot.write_list_begin(&TListIdentifier::new(TType::Struct, fld_var.len() as i32))?;
      for e in fld_var {
        e.write_to_out_protocol(o_prot)?;
      }
      o_prot.write_list_end()?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

